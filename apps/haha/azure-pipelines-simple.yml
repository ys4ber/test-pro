# Azure DevOps Pipeline for WordPress App: haha
# Simplified Multi-Stage Deployment using Ansible (without environments)

name: haha-Deploy-Simple-v4

trigger:
  branches:
    include:
      - youssef/init
      - master
      - main

  paths:
    include:
      - apps/haha/**/*

pr:
  branches:
    include:
      - youssef/init
      - master
      - main
      
  paths:
    include:
      - apps/haha/**/*

variables:
  APP_NAME: 'haha'
  DEPLOY_USER: 'liadwordpress'
  SERVER_IP: '192.99.35.79'
  WP_URL_TEST: 'http://192.99.35.79:4000'
  WP_URL_PREPROD: 'http://192.99.35.79:4100'
  WP_URL_PROD: 'http://192.99.35.79:4200'
  PMA_URL_TEST: 'http://192.99.35.79:4001'
  PMA_URL_PREPROD: 'http://192.99.35.79:4101'
  PMA_URL_PROD: 'http://192.99.35.79:4201'

stages:
  # =============================================================================
  # TEST STAGE
  # =============================================================================
  - stage: Test
    displayName: "üß™ Test Environment"
    variables:
      DEPLOY_ENVIRONMENT: 'ysaber-env'
      ANSIBLE_INVENTORY: 'ansible/inventories/test/hosts'
    jobs:
      - job: DeployTest
        displayName: "üöÄ Deploy to Test"
        steps:
          - checkout: self
            displayName: "üì• Checkout Source Code"

          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.x'
            displayName: "üêç Setup Python"

          - script: |
              sudo apt-get update -qq
              sudo apt-get install -y ansible sshpass rsync
              ansible --version
            displayName: "üì¶ Install Ansible Dependencies"

          - script: |
              echo "üì¶ Installing Ansible Collections (Enhanced)..."
              APP_PATH="$(Build.SourcesDirectory)/apps/$(APP_NAME)"
              
              # Force install the latest community.docker collection
              echo "üîß Installing community.docker collection..."
              ansible-galaxy collection install community.docker:>=4.0.0 --force
              ansible-galaxy collection install ansible.posix --force
              
              # Verify the installation
              echo "üîç Verifying collection installation..."
              ansible-galaxy collection list community.docker
              
              # Install from requirements if it exists
              if [ -f "$APP_PATH/ansible/requirements.yml" ]; then
                echo "üìã Installing from requirements.yml..."
                ansible-galaxy collection install -r "$APP_PATH/ansible/requirements.yml" --force
              fi
              
              # Verify docker_compose_v2 module is available
              echo "üîç Verifying docker_compose_v2 module availability..."
              python3 -c "
              import sys
              import os
              sys.path.insert(0, '/home/vsts/.ansible/collections/ansible_collections')
              try:
                  from ansible_collections.community.docker.plugins.modules import docker_compose_v2
                  print('‚úÖ docker_compose_v2 module is available')
              except ImportError as e:
                  print('‚ùå docker_compose_v2 module is not available:', e)
                  print('üìÇ Available modules in community.docker:')
                  docker_path = '/home/vsts/.ansible/collections/ansible_collections/community/docker/plugins/modules'
                  if os.path.exists(docker_path):
                      for f in os.listdir(docker_path):
                          if f.endswith('.py') and not f.startswith('_'):
                              print(f'  - {f[:-3]}')
                  sys.exit(1)
              "
              
              echo "‚úÖ Ansible collections installed and verified"
            displayName: "üì¶ Install Ansible Collections (Enhanced)"

          - script: |
              echo "üîç Validating Ansible configuration..."
              APP_PATH="$(Build.SourcesDirectory)/apps/$(APP_NAME)"
              
              # Validate directories exist
              if [ ! -d "$APP_PATH" ]; then
                echo "‚ùå App directory not found: $APP_PATH"
                exit 1
              fi
              
              if [ ! -f "$APP_PATH/ansible/deploy-fast.yml" ]; then
                echo "‚ùå Ansible playbook not found: $APP_PATH/ansible/deploy-fast.yml"
                exit 1
              fi
              
              if [ ! -f "$APP_PATH/$(ANSIBLE_INVENTORY)" ]; then
                echo "‚ùå Ansible inventory not found: $APP_PATH/$(ANSIBLE_INVENTORY)"
                exit 1
              fi
              
              # Validate Ansible syntax
              echo "üîç Validating Ansible playbook syntax..."
              cd "$APP_PATH"
              ansible-playbook ansible/deploy-fast.yml --syntax-check
              
              echo "‚úÖ Ansible configuration validated"
              echo "üìã App structure:"
              ls -la "$APP_PATH"
              echo "üìã Ansible structure:"
              ls -la "$APP_PATH/ansible/"
            displayName: "üîç Validate Ansible Configuration"

          - script: |
              echo "üîß Deploying with Ansible to Test Environment (Fast Mode)..."
              APP_PATH="$(Build.SourcesDirectory)/apps/$(APP_NAME)"
              
              # Set Ansible environment variables
              export ANSIBLE_HOST_KEY_CHECKING=False
              export ANSIBLE_SSH_TIMEOUT=30
              export ANSIBLE_TIMEOUT=60
              
              cd "$APP_PATH"
              
              # Debug environment variables
              echo "üîç Environment Variables Debug:"
              echo "DEPLOY_ENVIRONMENT: $(DEPLOY_ENVIRONMENT)"
              echo "APP_NAME: $(APP_NAME)"
              echo "WP_URL_TEST: $(WP_URL_TEST)"
              echo "PMA_URL_TEST: $(PMA_URL_TEST)"
              
              # Create a simple JSON file with variables using deploy_environment instead of environment
              cat > /tmp/ansible_vars.json << EOF
              {
                "app_name": "$(APP_NAME)",
                "deploy_environment": "$(DEPLOY_ENVIRONMENT)",
                "wp_url": "$(WP_URL_TEST)",
                "pma_url": "$(PMA_URL_TEST)",
                "ssh_password": "$(SSH_PASSWORD)",
                "wordpress_port": "4000",
                "phpmyadmin_port": "4001"
              }
              EOF
              
              echo "üîç Generated variables file:"
              cat /tmp/ansible_vars.json
              
              # Run Ansible playbook with JSON file - NO MORE environment variable
              ansible-playbook ansible/deploy-fast.yml \
                -i $(ANSIBLE_INVENTORY) \
                --extra-vars "@/tmp/ansible_vars.json" \
                --ssh-extra-args="-o StrictHostKeyChecking=no -o Port=2220 -o ConnectTimeout=30" \
                -vv
            displayName: "üîß Deploy with Ansible to Test (Fast)"

          - script: |
              echo "üè• Running Test Environment Health Checks..."
              
              # Function to test endpoint
              test_endpoint() {
                local url=$1
                local name=$2
                local max_attempts=8
                local attempt=1
                
                while [ $attempt -le $max_attempts ]; do
                  echo "üîç Testing $name (attempt $attempt/$max_attempts)..."
                  
                  # Test with curl
                  if curl -f -s -m 15 "$url" > /dev/null 2>&1; then
                    echo "‚úÖ $name is healthy (HTTP OK)"
                    return 0
                  # Test for any response (even if not 200)
                  elif curl -s -m 15 "$url" > /dev/null 2>&1; then
                    echo "‚ö†Ô∏è $name responded but may have issues (checking content...)"
                    # Check if we get any content
                    local content=$(curl -s -m 15 "$url" | head -c 100)
                    if [ ! -z "$content" ]; then
                      echo "‚úÖ $name is responding with content"
                      return 0
                    fi
                  fi
                  
                  echo "‚è≥ Waiting 15 seconds before next attempt..."
                  sleep 15
                  ((attempt++))
                done
                
                echo "‚ùå $name failed health check after $max_attempts attempts"
                return 1
              }
              
              # Wait longer for services to fully start
              echo "‚è≥ Waiting for services to start (90 seconds)..."
              sleep 90
              
              # Test endpoints with detailed feedback
              echo "üîç Testing WordPress Test Frontend..."
              if test_endpoint "$(WP_URL_TEST)" "WordPress Test Frontend"; then
                echo "‚úÖ WordPress is accessible and healthy"
              else
                echo "‚ö†Ô∏è WordPress may still be starting, checking container status..."
                # Check container status via SSH
                echo "üìä Checking container status..."
                sshpass -p "$(SSH_PASSWORD)" ssh -o StrictHostKeyChecking=no -o Port=2220 -o ConnectTimeout=10 $(DEPLOY_USER)@$(SERVER_IP) \
                  "cd /home/$(DEPLOY_USER)/$(APP_NAME)-ysaber-env && docker compose ps && echo '--- Container Logs ---' && docker compose logs --tail=10" || echo "Could not check containers via SSH"
              fi
              
              echo ""
              echo "üîç Testing phpMyAdmin..."
              if test_endpoint "$(PMA_URL_TEST)" "phpMyAdmin Test"; then
                echo "‚úÖ phpMyAdmin is accessible and healthy"
              else
                echo "‚ö†Ô∏è phpMyAdmin may still be starting"
              fi
              
              echo ""
              echo "‚úÖ Test environment health checks completed"
              echo "üåê Access URLs:"
              echo "  üì± WordPress: $(WP_URL_TEST)"
              echo "  üóÑÔ∏è phpMyAdmin: $(PMA_URL_TEST)"
              echo "  üìÅ Deployment Path: /home/$(DEPLOY_USER)/$(APP_NAME)-ysaber-env"
              echo ""
            displayName: "üîç Test Environment Health Check"

  # =============================================================================
  # PREPROD STAGE
  # =============================================================================
  # - stage: PreProd
  #   displayName: "üîÑ PreProd Environment"
  #   dependsOn: Test
  #   condition: succeeded()
  #   variables:
  #     DEPLOY_ENVIRONMENT: 'ysaber-preprod'
  #     ANSIBLE_INVENTORY: 'ansible/inventories/preprod/hosts'
  #   jobs:
  #     - job: DeployPreProd
  #       displayName: "üöÄ Deploy to PreProd"
  #       steps:
  #         - checkout: self
  #           displayName: "üì• Checkout Source Code"

  #         - task: UsePythonVersion@0
  #           inputs:
  #             versionSpec: '3.x'
  #           displayName: "üêç Setup Python"

  #         - script: |
  #             sudo apt-get update -qq
  #             sudo apt-get install -y ansible sshpass rsync
  #             ansible --version
  #           displayName: "üì¶ Install Ansible Dependencies"

  #         - script: |
  #             echo "üîß Deploying with Ansible to PreProd Environment..."
  #             APP_PATH="$(Build.SourcesDirectory)/apps/$(APP_NAME)"
              
  #             cd "$APP_PATH"
  #             ansible-playbook ansible/deploy-fast.yml \
  #               -i $(ANSIBLE_INVENTORY) \
  #               --extra-vars "app_name=$(APP_NAME) deploy_environment=$(DEPLOY_ENVIRONMENT) wp_url=$(WP_URL_PREPROD) pma_url=$(PMA_URL_PREPROD) ssh_password=$(SSH_PASSWORD)" \
  #               --ssh-extra-args="-o StrictHostKeyChecking=no" \
  #               -v
  #           env:
  #             SSH_PASSWORD: $(SSH_PASSWORD)
  #           displayName: "üîß Deploy with Ansible to PreProd"

  #         - script: |
  #             # Health check function
  #             test_endpoint() {
  #               local url="$1"
  #               local name="$2"
  #               local max_attempts=5
  #               local attempt=1
                
  #               while [ $attempt -le $max_attempts ]; do
  #                 echo "üîç Testing $name (attempt $attempt/$max_attempts)..."
                  
  #                 if curl -f -s -m 15 "$url" > /dev/null 2>&1; then
  #                   echo "‚úÖ $name is responding correctly"
  #                   return 0
  #                 elif curl -s -m 15 "$url" > /dev/null 2>&1; then
  #                   echo "‚ö†Ô∏è $name responded but may have issues (checking content...)"
  #                   local content=$(curl -s -m 15 "$url" | head -c 100)
  #                   if [ ! -z "$content" ]; then
  #                     echo "‚úÖ $name is responding with content"
  #                     return 0
  #                   fi
  #                 fi
                  
  #                 echo "‚è≥ Waiting 15 seconds before next attempt..."
  #                 sleep 15
  #                 ((attempt++))
  #               done
                
  #               echo "‚ùå $name failed health check after $max_attempts attempts"
  #               return 1
  #             }
              
  #             echo "üè• Running PreProd Environment Health Checks..."
  #             sleep 90
              
  #             echo "üîç Testing WordPress PreProd Frontend..."
  #             test_endpoint "$(WP_URL_PREPROD)" "WordPress PreProd Frontend"
              
  #             echo "üîç Testing WordPress PreProd Admin..."
  #             test_endpoint "$(WP_URL_PREPROD)/wp-admin" "WordPress PreProd Admin"
              
  #             echo "üîç Testing phpMyAdmin PreProd..."
  #             test_endpoint "$(PMA_URL_PREPROD)" "phpMyAdmin PreProd"
              
  #             echo "‚úÖ PreProd environment health checks completed"
  #             echo "üìÅ Deployment Path: /home/$(DEPLOY_USER)/$(APP_NAME)-ysaber-preprod"
  #             echo ""
  #           displayName: "üîç PreProd Environment Health Check"

  # # =============================================================================
  # # PRODUCTION STAGE
  # # =============================================================================
  # - stage: Production
  #   displayName: "üöÄ Production Environment"
  #   dependsOn: PreProd
  #   condition: succeeded()
  #   variables:
  #     DEPLOY_ENVIRONMENT: 'ysaber-prod'
  #     ANSIBLE_INVENTORY: 'ansible/inventories/prod/hosts'
  #   jobs:
  #     - job: DeployProduction
  #       displayName: "üöÄ Deploy to Production"
  #       steps:
  #         - checkout: self
  #           displayName: "üì• Checkout Source Code"

  #         - task: UsePythonVersion@0
  #           inputs:
  #             versionSpec: '3.x'
  #           displayName: "üêç Setup Python"

  #         - script: |
  #             sudo apt-get update -qq
  #             sudo apt-get install -y ansible sshpass rsync
  #             ansible --version
  #           displayName: "üì¶ Install Ansible Dependencies"

  #         - script: |
  #             echo "üîß Deploying with Ansible to Production Environment..."
  #             APP_PATH="$(Build.SourcesDirectory)/apps/$(APP_NAME)"
              
  #             cd "$APP_PATH"
  #             ansible-playbook ansible/deploy-fast.yml \
  #               -i $(ANSIBLE_INVENTORY) \
  #               --extra-vars "app_name=$(APP_NAME) deploy_environment=$(DEPLOY_ENVIRONMENT) wp_url=$(WP_URL_PROD) pma_url=$(PMA_URL_PROD) ssh_password=$(SSH_PASSWORD)" \
  #               --ssh-extra-args="-o StrictHostKeyChecking=no" \
  #               -v
  #           env:
  #             SSH_PASSWORD: $(SSH_PASSWORD)
  #           displayName: "üîß Deploy with Ansible to Production"

  #         - script: |
  #             # Health check function
  #             test_endpoint() {
  #               local url="$1"
  #               local name="$2"
  #               local max_attempts=5
  #               local attempt=1
                
  #               while [ $attempt -le $max_attempts ]; do
  #                 echo "üîç Testing $name (attempt $attempt/$max_attempts)..."
                  
  #                 if curl -f -s -m 15 "$url" > /dev/null 2>&1; then
  #                   echo "‚úÖ $name is responding correctly"
  #                   return 0
  #                 elif curl -s -m 15 "$url" > /dev/null 2>&1; then
  #                   echo "‚ö†Ô∏è $name responded but may have issues (checking content...)"
  #                   local content=$(curl -s -m 15 "$url" | head -c 100)
  #                   if [ ! -z "$content" ]; then
  #                     echo "‚úÖ $name is responding with content"
  #                     return 0
  #                   fi
  #                 fi
                  
  #                 echo "‚è≥ Waiting 15 seconds before next attempt..."
  #                 sleep 15
  #                 ((attempt++))
  #               done
                
  #               echo "‚ùå $name failed health check after $max_attempts attempts"
  #               return 1
  #             }
              
  #             echo "üè• Running Production Environment Health Checks..."
  #             sleep 90
              
  #             echo "üîç Testing WordPress Production Frontend..."
  #             test_endpoint "$(WP_URL_PROD)" "WordPress Production Frontend"
              
  #             echo "üîç Testing WordPress Production Admin..."
  #             test_endpoint "$(WP_URL_PROD)/wp-admin" "WordPress Production Admin"
              
  #             echo "üîç Testing phpMyAdmin Production..."
  #             test_endpoint "$(PMA_URL_PROD)" "phpMyAdmin Production"
              
  #             echo "‚úÖ Production environment health checks completed"
  #             echo "üåê Production URLs:"
  #             echo "  üì± WordPress: $(WP_URL_PROD)"
  #             echo "  üóÑÔ∏è phpMyAdmin: $(PMA_URL_PROD)"
  #             echo "  üìÅ Deployment Path: /home/$(DEPLOY_USER)/$(APP_NAME)-ysaber-prod"
  #             echo ""
  #           displayName: "üîç Production Environment Health Check"