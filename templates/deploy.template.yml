---
# WordPress Application Deployment Playbook for {{APP_NAME}}
# This playbook handles deployment, backup, maintenance, and cleanup operations

- name: Deploy WordPress Application - {{APP_NAME}}
  hosts: wordpress_servers
  become: yes
  gather_facts: yes
  
  vars:
    # Default variables (can be overridden via --extra-vars)
    app_name: "{{ app_name | default('{{APP_NAME}}') }}"
    environment: "{{ environment | default('test') }}"
    deploy_user: "{{ ansible_user | default('{{DEPLOY_USER}}') }}"
    
    # Deployment paths
    app_base_path: "/home/{{ deploy_user }}"
    app_deployment_path: "{{ app_base_path }}/{{ app_name }}-{{ environment }}"
    backup_base_path: "{{ app_base_path }}/backups/{{ app_name }}"
    
    # Operation modes
    backup_only: "{{ backup_only | default(false) }}"
    cleanup_environment: "{{ cleanup_environment | default(false) }}"
    maintenance_mode: "{{ maintenance_mode | default(false) }}"
    full_backup: "{{ full_backup | default(false) }}"

  pre_tasks:
    # =============================================================================
    # ENVIRONMENT VALIDATION
    # =============================================================================
    - name: "üîç Validate deployment parameters"
      block:
        - name: Display deployment information
          debug:
            msg:
              - "üöÄ Starting deployment for: {{ app_name }}"
              - "üåç Environment: {{ environment }}"
              - "üë§ Deploy user: {{ deploy_user }}"
              - "üìÅ Deployment path: {{ app_deployment_path }}"
              - "üíæ Backup only: {{ backup_only }}"
              - "üßπ Cleanup mode: {{ cleanup_environment }}"
              - "üîß Maintenance mode: {{ maintenance_mode }}"

        - name: Validate required variables
          assert:
            that:
              - app_name is defined and app_name != ""
              - environment in ['test', 'preprod', 'prod']
              - deploy_user is defined and deploy_user != ""
            fail_msg: "‚ùå Required variables missing or invalid"
            success_msg: "‚úÖ All required variables validated"

    # =============================================================================
    # SYSTEM PREPARATION
    # =============================================================================
    - name: "üîß Prepare system environment"
      block:
        - name: Update system package cache
          apt:
            update_cache: yes
            cache_valid_time: 3600
          when: ansible_os_family == "Debian"

        - name: Install required system packages
          package:
            name:
              - docker.io
              - docker-compose-plugin
              - curl
              - wget
              - unzip
              - rsync
              - cron
            state: present

        - name: Ensure Docker service is running
          systemd:
            name: docker
            state: started
            enabled: yes

        - name: Add deploy user to docker group
          user:
            name: "{{ deploy_user }}"
            groups: docker
            append: yes

    # =============================================================================
    # DIRECTORY STRUCTURE
    # =============================================================================
    - name: "üìÅ Create directory structure"
      block:
        - name: Create application deployment directory
          file:
            path: "{{ app_deployment_path }}"
            state: directory
            owner: "{{ deploy_user }}"
            group: "{{ deploy_user }}"
            mode: '0755'

        - name: Create backup directories
          file:
            path: "{{ item }}"
            state: directory
            owner: "{{ deploy_user }}"
            group: "{{ deploy_user }}"
            mode: '0755'
          loop:
            - "{{ backup_base_path }}"
            - "{{ backup_base_path }}/{{ ansible_date_time.date }}"

        - name: Create application subdirectories
          file:
            path: "{{ app_deployment_path }}/{{ item }}"
            state: directory
            owner: "{{ deploy_user }}"
            group: "{{ deploy_user }}"
            mode: '0755'
          loop:
            - wp-content/themes
            - wp-content/uploads
            - wp-content/plugins
            - php-conf
            - logs
            - scripts
          when: not cleanup_environment

  # =============================================================================
  # CONDITIONAL TASK EXECUTION
  # =============================================================================
  tasks:
    # BACKUP OPERATIONS
    - name: "üíæ Execute backup operations"
      include_tasks: tasks/backup.yml
      when: backup_only or full_backup or (environment == 'prod' and not cleanup_environment)

    # MAINTENANCE MODE
    - name: "‚è∏Ô∏è Enable maintenance mode"
      include_tasks: tasks/maintenance.yml
      vars:
        maintenance_state: true
      when: maintenance_mode and not cleanup_environment

    # CLEANUP OPERATIONS
    - name: "üßπ Execute cleanup operations"
      include_tasks: tasks/cleanup.yml
      when: cleanup_environment

  # =============================================================================
  # DEPLOYMENT ROLES
  # =============================================================================
  roles:
    - role: wordpress
      when: not cleanup_environment and not backup_only
      tags: ['wordpress', 'deploy']
      
    - role: nginx
      when: not cleanup_environment and not backup_only
      tags: ['nginx', 'deploy']
      
    - role: mysql
      when: not cleanup_environment and not backup_only
      tags: ['mysql', 'deploy']

  # =============================================================================
  # POST-DEPLOYMENT TASKS
  # =============================================================================
  post_tasks:
    # DISABLE MAINTENANCE MODE
    - name: "‚ñ∂Ô∏è Disable maintenance mode"
      include_tasks: tasks/maintenance.yml
      vars:
        maintenance_state: false
      when: maintenance_mode and not cleanup_environment

    # HEALTH CHECKS
    - name: "üè• Execute health checks"
      include_tasks: tasks/health_check.yml
      when: not cleanup_environment and not backup_only

    # DEPLOYMENT LOGGING
    - name: "üìä Log deployment completion"
      include_tasks: tasks/logging.yml
      when: not cleanup_environment and not backup_only

# =============================================================================
# ADDITIONAL TASK FILES
# =============================================================================

# Note: Create these task files in the same directory as deploy.yml

# tasks/backup.yml - Backup operations
# tasks/cleanup.yml - Environment cleanup
# tasks/maintenance.yml - Maintenance mode toggle
# tasks/health_check.yml - Health validation
# tasks/logging.yml - Deployment logging